---
# Backend Tasks

- name: Update package list
  apt:
    update_cache: yes

- name: Install basic packages
  apt:
    name: "{{ BASIC_PACKAGES }}"
    state: present

# JAVA CONFIGURATION
- name: Check if Java 20.0.2 is already installed
  ansible.builtin.command:
    cmd: "java -version"
  register: java_version_output
  ignore_errors: yes

- name: Install Java if version is not 20.0.2
  when: java_version_output.rc != 0 or "'20.0.2' not in java_version_output.stdout"
  block:
    - name: Download Java 20.0.2 .deb package
      ansible.builtin.command:
        cmd: "wget https://download.oracle.com/java/20/archive/jdk-20.0.2_linux-x64_bin.deb -O /tmp/jdk-20.0.2.deb"

    - name: Install the Java .deb package
      ansible.builtin.command:
        cmd: "sudo dpkg -i /tmp/jdk-20.0.2.deb"
      ignore_errors: yes

    - name: Fix missing dependencies
      ansible.builtin.command:
        cmd: "sudo apt --fix-broken install -y"

    - name: Install Java 20 as an alternative
      ansible.builtin.command:
        cmd: "sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-20/bin/java 1"

    - name: Set Java 20 as the default Java version
      ansible.builtin.command:
        cmd: "sudo update-alternatives --set java /usr/lib/jvm/jdk-20/bin/java"

    - name: Set JAVA_HOME environment variable
      ansible.builtin.shell:
        cmd: "echo 'export JAVA_HOME=/usr/lib/jvm/jdk-20' | sudo tee -a /etc/profile"

    - name: Set JAVA_HOME in /etc/profile
      ansible.builtin.lineinfile:
        path: "/etc/profile"
        line: "export JAVA_HOME=/usr/lib/jvm/jdk-20"
        create: yes

# GRADLE CONFIGURATION
- name: Check if Gradle is already installed
  stat:
    path: "/opt/gradle/gradle-{{ GRADLE_VERSION }}"
  register: gradle_stat

- name: Install Gradle if not already installed
  when: gradle_stat.stat.exists == false
  block:
    - name: Download Gradle distribution
      get_url:
        url: "https://services.gradle.org/distributions/gradle-{{ GRADLE_VERSION }}-bin.zip"
        dest: "/tmp/gradle-{{ GRADLE_VERSION }}-bin.zip"

    - name: Create /opt/gradle directory
      file:
        path: "/opt/gradle"
        state: directory
        mode: "0755"

    - name: Unzip Gradle
      unarchive:
        src: "/tmp/gradle-{{ GRADLE_VERSION }}-bin.zip"
        dest: "/opt/gradle/"
        remote_src: yes

    - name: Add Gradle to PATH
      lineinfile:
        path: "/etc/profile.d/gradle.sh"
        line: "export PATH=$PATH:/opt/gradle/gradle-{{ GRADLE_VERSION }}/bin"
        create: yes

    - name: Clean up downloaded Gradle zip file
      file:
        path: "/tmp/gradle-{{ GRADLE_VERSION }}-bin.zip"
        state: absent

# MYSQL
- name: Install MySQL server
  apt:
    name: mysql-server
    state: present

- name: Ensure MySQL service is started and enabled
  service:
    name: mysql
    state: started
    enabled: true

- name: Replace spring.datasource.url in application.properties
  lineinfile:
    path: "{{ BACKEND_DIR }}/src/main/resources/application.properties"
    regexp: '^spring.datasource.url='
    line: "spring.datasource.url={{ DB_URL }}"

- name: Replace spring.datasource.username in application.properties
  lineinfile:
    path: "{{ BACKEND_DIR }}/src/main/resources/application.properties"
    regexp: '^spring.datasource.username='
    line: "spring.datasource.username={{ DB_USERNAME }}"

- name: Replace spring.datasource.password in application.properties
  lineinfile:
    path: "{{ BACKEND_DIR }}/src/main/resources/application.properties"
    regexp: '^spring.datasource.password='
    line: "spring.datasource.password={{ DB_PASSWORD }}"

- name: Create e4l database 
  ansible.builtin.command: "mysql -u {{ DB_USERNAME }} -p{{ DB_PASSWORD }} -e 'CREATE DATABASE IF NOT EXISTS e4l;'"
  become: yes
